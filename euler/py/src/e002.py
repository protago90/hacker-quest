#!/usr/bin/env python
# by protago90

from src.utils import promptify


def run_e2v1(x: int) -> int:
    rec = 0
    f, fn = 1, 2
    while f <= x:
        if f % 2 == 0: rec += f
        fn, f = fn + f, fn
    return rec

def run_e2v2(x: int, f: int=1, fn: int=2) -> int:
    if f > x: return 0
    inc = f if f % 2 == 0 else 0
    fn, f = fn + f, fn
    return inc + run_e2v2(x, f, fn)


@promptify
def solve_e2() -> int:
    '''
    Even Fibonacci numbers
    Each new term in the Fibonacci sequence is generated by adding the previous two
    terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    > By considering the terms in the Fibonacci sequence whose values do not exceed
    four million, find the sum of the even-valued terms.
    ''' 
    return run_e2v1(4000000)


if __name__ == '__main__':
    solve_e2()
    # >> the anwser for the #2 euler problem is >4613732<; computed in 0.0000s ∎

    # from src.utils import timeitfy
    # timeitfy([run_e2v1, run_e2v2], args=[4000000], i=10000)
    # >> the times of test solutions: run_e2v1=0.04s run_e2v2=0.08s ∎
